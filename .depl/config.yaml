project_name: cc-monorepo
version: 4
langs:
  - rust
targets:
  - arch: x86_64
    os: linux
    os_derivative: any
    os_version:
      type: no
  - arch: wasm32
    os: web
    os_derivative: any
    os_version:
      type: no
deploy_toolkit: docker
cache_files:
  - .git
  - Cargo.lock
  - target
artifacts:
  - target/x86_64-unknown-linux-gnu/release/cc-static-server
  - cc-static-server/static-server.yaml
  - cc-ui-kit-leptos-test/dist
  - cc-ui-kit-leptos-test/static-server.yaml
variables: []
place_artifacts_into_project_root:
  - from: target/x86_64-unknown-linux-gnu/release/cc-static-server
    to: static-server/cc-static-server
  - from: target/x86_64-unknown-linux-gnu/release/cc-static-server
    to: cc-ui-kit-leptos-test/cc-static-server
  - from: cc-static-server/static-server.yaml
    to: static-server/static-server.yaml
  - from: cc-ui-kit-leptos-test/dist
    to: cc-ui-kit-leptos-test/dist
  - from: cc-ui-kit-leptos-test/static-server.yaml
    to: cc-ui-kit-leptos-test/static-server.yaml
  - from: cc-error-pages/dist
    to: cc-error-pages/dist
pipelines:
  - title: common-ops
    desc: Common monorepo operations
    info: cc-services-common-ops@0.1.0
    tags:
      - cargo
      - clippy
      - lint
    default: true
    actions:
      - title: Lint `cc-utils` on x86-64
        desc: Получено из `Cargo Clippy`.
        info: cargo-clippy@0.1.0
        tags:
          - cargo
          - clippy
        exec_in_project_dir: false
        action:
          type: pre_build
          supported_langs:
            - rust
          commands:
            - bash_c: RUSTFLAGS='--cfg reqwest_unstable' cargo clippy --package cc-utils --target x86_64-unknown-linux-gnu
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Lint `cc-utils` on wasm32
        desc: Получено из `Cargo Clippy`.
        info: cargo-clippy@0.1.0
        tags:
          - cargo
          - clippy
        exec_in_project_dir: false
        action:
          type: pre_build
          supported_langs:
            - rust
          commands:
            - bash_c: RUSTFLAGS='--cfg reqwest_unstable' cargo clippy --package cc-utils --target wasm32-unknown-unknown --no-default-features --features=reqwest
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Lint `cc-auth` on x86-64
        desc: Получено из `Cargo Clippy`.
        info: cargo-clippy@0.1.0
        tags:
          - cargo
          - clippy
        exec_in_project_dir: false
        action:
          type: pre_build
          supported_langs:
            - rust
          commands:
            - bash_c: cargo clippy --package cc-auth --target x86_64-unknown-linux-gnu
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Lint `cc-auth` on wasm32
        desc: Получено из `Cargo Clippy`.
        info: cargo-clippy@0.1.0
        tags:
          - cargo
          - clippy
        exec_in_project_dir: false
        action:
          type: pre_build
          supported_langs:
            - rust
          commands:
            - bash_c: cargo clippy --package cc-auth --target wasm32-unknown-unknown
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Lint `cc-ui-kit`
        desc: Получено из `Cargo Clippy`.
        info: cargo-clippy@0.1.0
        tags:
          - cargo
          - clippy
        exec_in_project_dir: false
        action:
          type: pre_build
          supported_langs:
            - rust
          commands:
            - bash_c: cargo clippy --package cc-ui-kit --target wasm32-unknown-unknown
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Lint `cc-ui-kit-leptos-test`
        desc: Получено из `Cargo Clippy`.
        info: cargo-clippy@0.1.0
        tags:
          - cargo
          - clippy
        exec_in_project_dir: false
        action:
          type: pre_build
          supported_langs:
            - rust
          commands:
            - bash_c: cargo clippy --package cc-ui-kit-leptos-test --target wasm32-unknown-unknown
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Lint `cc-error-pages`
        desc: Получено из `Cargo Clippy`.
        info: cargo-clippy@0.1.0
        tags:
          - cargo
          - clippy
        exec_in_project_dir: false
        action:
          type: pre_build
          supported_langs:
            - rust
          commands:
            - bash_c: cargo clippy --package cc-error-pages --target wasm32-unknown-unknown
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Lint `cc-server-kit`
        desc: Получено из `Cargo Clippy`.
        info: cargo-clippy@0.1.0
        tags:
          - cargo
          - clippy
        exec_in_project_dir: false
        action:
          type: pre_build
          supported_langs:
            - rust
          commands:
            - bash_c: RUSTFLAGS='--cfg reqwest_unstable' cargo clippy --package cc-server-kit --target x86_64-unknown-linux-gnu
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Lint `cc-static-server`
        desc: Получено из `Cargo Clippy`.
        info: cargo-clippy@0.1.0
        tags:
          - cargo
          - clippy
        exec_in_project_dir: false
        action:
          type: pre_build
          supported_langs:
            - rust
          commands:
            - bash_c: cargo clippy --package cc-static-server --target x86_64-unknown-linux-gnu
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Format
        desc: Получено из `Format `.rs` files`.
        info: cargo-fmt@0.1.0
        tags: []
        exec_in_project_dir: true
        action:
          type: pre_build
          supported_langs:
            - rust
          commands:
            - bash_c: cargo fmt -- --config tab_spaces=2,max_width=120 */**/*.rs
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
  - title: build-static-server
    desc: Build `cc-static-server` and update content storage
    info: cc-services-static-server@0.1.0
    tags:
      - cargo
      - clippy
      - lint
    default: true
    actions:
      - title: Sync script to know Rust package version
        desc: ""
        info: sync-rust-crate-ver@0.1.0
        tags: []
        exec_in_project_dir: false
        action:
          type: use_from_storage
          content_info: get-know-rust-package-version@latest
      - title: Cargo Build (Release)
        desc: Build the Rust project with Cargo default settings in release mode
        info: cargo-rel@0.1
        tags:
          - rust
          - cargo
        requirements:
          - type: exists
            path: /bin/cargo
        action:
          type: build
          supported_langs:
            - rust
          commands:
            - bash_c: cargo build --release --package cc-static-server --target x86_64-unknown-linux-gnu
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
      - title: UPX Compress
        desc: Compress the binary with UPX.
        info: upx-compress@0.1.0
        tags:
          - upx
        requirements:
          - type: exists_any
            paths:
              - /usr/bin/upx
              - ~/.local/bin/upx
        exec_in_project_dir: false
        action:
          type: post_build
          supported_langs:
            - rust
            - go
            - c
            - cpp
          commands:
            - bash_c: upx <af>
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
              daemon: false
              placeholders:
                - <af>
              replacements:
                - group:
                    - from: <af>
                      to:
                        title: target/x86_64-unknown-linux-gnu/release/cc-static-server
                        is_secret: false
                        value:
                          type: plain
                          value: target/x86_64-unknown-linux-gnu/release/cc-static-server
      - title: Auto-upload CC Static Server to Deployer's Storage
        desc: ""
        info: auto-upload-static-server@0.1.0
        tags: []
        exec_in_project_dir: false
        action:
          type: add_to_storage
          short_name: static-server
          auto_version_rule:
            type: cmd_stdout
            cmd:
              bash_c: python .depl/rust-crate-ver.py cc-static-server/Cargo.toml
              ignore_fails: true
              show_success_output: true
              show_bash_c: false
              only_when_fresh: false
          content:
            type: fixed_files
            placements:
              - from: target/x86_64-unknown-linux-gnu/release/cc-static-server
                to: cc-static-server
              - from: cc-static-server/static-server.yaml
                to: static-server.yaml
  - title: build-ui-kit-test
    desc: Build `cc-ui-kit-leptos-test`
    info: cc-ui-kit-frontend-app-build@0.1.0
    tags:
      - cargo
      - leptos
      - trunk
      - rust
      - wasm
      - web
    default: true
    actions:
      - title: Format `leptos` macroses
        desc: Format Leptos `.rs` files
        info: leptos-fmt@0.1.0
        tags:
          - rust
          - cargo
          - fmt
        requirements:
          - type: exists
            path: ~/.cargo/bin/leptosfmt
        exec_in_project_dir: true
        action:
          type: pre_build
          supported_langs:
            - rust
          commands:
            - bash_c: cd cc-ui-kit-leptos-test && leptosfmt -t 2 ./**/*.rs
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Format Rust code
        desc: Format `.rs` files
        info: cargo-fmt@0.1.0
        tags:
          - rust
          - cargo
          - fmt
        exec_in_project_dir: true
        action:
          type: pre_build
          supported_langs:
            - rust
          commands:
            - bash_c: cd cc-ui-kit-leptos-test && cargo fmt -- --config tab_spaces=2,max_width=120 */**/*.rs
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Compile Tailwind Styles
        desc: Получено из `Compile Tailwind Styles`. Compile application style classes with `tailwindcss` JS util.
        info: tailwind-css@0.1.0
        tags:
          - rust
          - css
          - tailwind
        exec_in_project_dir: false
        action:
          type: pre_build
          supported_langs:
            - CSS
          commands:
            - bash_c: cd cc-ui-kit-leptos-test && tailwindcss -i ./input.css -o ./public/tailwind.css --minify
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Trunk Build
        desc: Получено из `Trunk Build`. Build WASM application with `trunk` in release mode.
        info: trunk-release@0.1.0
        tags:
          - cargo
          - rust
          - trunk
          - wasm
          - web
        requirements:
          - type: exists
            path: ~/.cargo/bin/trunk
        exec_in_project_dir: false
        action:
          type: build
          supported_langs:
            - rust
          commands:
            - bash_c: trunk build --release --config cc-ui-kit-leptos-test/Trunk.toml
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Optimize WASM
        desc: Run `wasm-opt` with `-Oz` argument inside `dist` folder
        info: wasm-opt@0.1.0
        tags:
          - wasm
          - wasm-opt
        requirements:
          - type: exists
            path: /bin/wasm-opt
        exec_in_project_dir: false
        action:
          type: post_build
          supported_langs:
            - rust
          commands:
            - bash_c: wasm-opt -Oz --all-features -o {file} {file}
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
              placeholders:
                - "{file}"
              replacements:
                - group:
                    - from: "{file}"
                      to:
                        title: wasm-project-file
                        is_secret: false
                        value:
                          type: plain
                          value: cc-ui-kit-leptos-test/dist/cc-ui-kit-leptos-test_bg.wasm
      - title: Add `tailwind.css` from `public` to `dist`
        desc: ""
        info: add-tailwind-css-to-dist-folder@0.1.0
        tags: []
        exec_in_project_dir: false
        action:
          type: post_build
          supported_langs:
            - rust
          commands:
            - bash_c: cp cc-ui-kit-leptos-test/public/tailwind.css cc-ui-kit-leptos-test/dist/
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Add `favicon.ico` from `public` to `dist`
        desc: ""
        info: add-favicon-to-dist-folder@0.1.0
        tags: []
        exec_in_project_dir: false
        action:
          type: post_build
          supported_langs:
            - rust
          commands:
            - bash_c: cp cc-ui-kit-leptos-test/public/favicon.ico cc-ui-kit-leptos-test/dist/
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Sync CC Static Server
        desc: ""
        info: sync-cc-static-server@0.1.0
        tags: []
        exec_in_project_dir: false
        action:
          type: use_from_storage
          content_info: static-server@latest
          subfolder: cc-ui-kit-leptos-test
  - title: deploy-ui-kit-test
    desc: Получено из `CC UI Kit Frontend App`. Run your `cc-ui-kit` app with Deployer
    info: cc-ui-kit-frontend-app-deploy@0.1.0
    tags:
      - cargo
      - leptos
      - trunk
      - rust
      - wasm
      - web
    default: false
    actions:
      - title: Format `leptos` macroses
        desc: Format Leptos `.rs` files
        info: leptos-fmt@0.1.0
        tags:
          - rust
          - cargo
          - fmt
        requirements:
          - type: exists
            path: ~/.cargo/bin/leptosfmt
        exec_in_project_dir: true
        action:
          type: pre_build
          supported_langs:
            - rust
          commands:
            - bash_c: cd cc-ui-kit-leptos-test && leptosfmt -t 2 ./**/*.rs
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Format Rust code
        desc: Format `.rs` files
        info: cargo-fmt@0.1.0
        tags:
          - rust
          - cargo
          - fmt
        exec_in_project_dir: true
        action:
          type: pre_build
          supported_langs:
            - rust
          commands:
            - bash_c: cd cc-ui-kit-leptos-test && cargo fmt -- --config tab_spaces=2,max_width=120 */**/*.rs
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Compile Tailwind Styles
        desc: Получено из `Compile Tailwind Styles`. Compile application style classes with `tailwindcss` JS util.
        info: tailwind-css@0.1.0
        tags:
          - rust
          - css
          - tailwind
        exec_in_project_dir: false
        action:
          type: pre_build
          supported_langs:
            - CSS
          commands:
            - bash_c: cd cc-ui-kit-leptos-test && tailwindcss -i ./input.css -o ./public/tailwind.css --minify
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Trunk Build
        desc: Получено из `Trunk Build`. Build WASM application with `trunk` in release mode.
        info: trunk-release@0.1.0
        tags:
          - cargo
          - rust
          - trunk
          - wasm
          - web
        requirements:
          - type: exists
            path: ~/.cargo/bin/trunk
        exec_in_project_dir: false
        action:
          type: build
          supported_langs:
            - rust
          commands:
            - bash_c: trunk build --release --config cc-ui-kit-leptos-test/Trunk.toml
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Optimize WASM
        desc: Run `wasm-opt` with `-Oz` argument inside `dist` folder
        info: wasm-opt@0.1.0
        tags:
          - wasm
          - wasm-opt
        requirements:
          - type: exists
            path: /bin/wasm-opt
        exec_in_project_dir: false
        action:
          type: post_build
          supported_langs:
            - rust
          commands:
            - bash_c: wasm-opt -Oz --all-features -o {file} {file}
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
              placeholders:
                - "{file}"
              replacements:
                - group:
                    - from: "{file}"
                      to:
                        title: wasm-project-file
                        is_secret: false
                        value:
                          type: plain
                          value: cc-ui-kit-leptos-test/dist/cc-ui-kit-leptos-test_bg.wasm
      - title: Add `tailwind.css` from `public` to `dist`
        desc: ""
        info: add-tailwind-css-to-dist-folder@0.1.0
        tags: []
        exec_in_project_dir: false
        action:
          type: post_build
          supported_langs:
            - rust
          commands:
            - bash_c: cp cc-ui-kit-leptos-test/public/tailwind.css cc-ui-kit-leptos-test/dist/
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Add `favicon.ico` from `public` to `dist`
        desc: ""
        info: add-favicon-to-dist-folder@0.1.0
        tags: []
        exec_in_project_dir: false
        action:
          type: post_build
          supported_langs:
            - rust
          commands:
            - bash_c: cp cc-ui-kit-leptos-test/public/favicon.ico cc-ui-kit-leptos-test/dist/
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Sync CC Static Server
        desc: ""
        info: sync-cc-static-server@0.1.0
        tags: []
        exec_in_project_dir: false
        action:
          type: use_from_storage
          content_info: static-server@latest
          subfolder: cc-ui-kit-leptos-test
      - title: Run `cc-static-server`
        desc: ""
        info: run-static-server@0.1.0
        tags: []
        exec_in_project_dir: false
        action:
          type: observe
          command:
            bash_c: cd cc-ui-kit-leptos-test && ./cc-static-server
            ignore_fails: true
            show_success_output: true
            show_bash_c: false
            only_when_fresh: false
  - title: build-error-pages
    desc: Build `cc-error-pages`
    info: cc-ui-kit-frontend-app-build@0.1.0
    tags:
      - cargo
      - leptos
      - trunk
      - rust
      - wasm
      - web
    default: true
    actions:
      - title: Format `leptos` macroses
        desc: Format Leptos `.rs` files
        info: leptos-fmt@0.1.0
        tags:
          - rust
          - cargo
          - fmt
        requirements:
          - type: exists
            path: ~/.cargo/bin/leptosfmt
        exec_in_project_dir: true
        action:
          type: pre_build
          supported_langs:
            - rust
          commands:
            - bash_c: cd cc-error-pages && leptosfmt -t 2 ./**/*.rs
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Format Rust code
        desc: Format `.rs` files
        info: cargo-fmt@0.1.0
        tags:
          - rust
          - cargo
          - fmt
        exec_in_project_dir: true
        action:
          type: pre_build
          supported_langs:
            - rust
          commands:
            - bash_c: cd cc-error-pages && cargo fmt -- --config tab_spaces=2,max_width=120 */**/*.rs
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Compile Tailwind Styles
        desc: Получено из `Compile Tailwind Styles`. Compile application style classes with `tailwindcss` JS util.
        info: tailwind-css@0.1.0
        tags:
          - rust
          - css
          - tailwind
        exec_in_project_dir: false
        action:
          type: pre_build
          supported_langs:
            - css
          commands:
            - bash_c: cd cc-error-pages && tailwindcss -i ./input.css -o ./public/tailwind.css --minify
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Trunk Build
        desc: Получено из `Trunk Build`. Build WASM application with `trunk` in release mode.
        info: trunk-release@0.1.0
        tags:
          - cargo
          - rust
          - trunk
          - wasm
          - web
        requirements:
          - type: exists
            path: ~/.cargo/bin/trunk
        exec_in_project_dir: false
        action:
          type: build
          supported_langs:
            - rust
          commands:
            - bash_c: trunk build --release --config cc-error-pages/Trunk.toml
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Optimize WASM
        desc: Run `wasm-opt` with `-Oz` argument inside `dist` folder
        info: wasm-opt@0.1.0
        tags:
          - wasm
          - wasm-opt
        requirements:
          - type: exists
            path: /bin/wasm-opt
        exec_in_project_dir: false
        action:
          type: post_build
          supported_langs:
            - rust
          commands:
            - bash_c: wasm-opt -Oz --all-features -o {file} {file}
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
              placeholders:
                - "{file}"
              replacements:
                - group:
                    - from: "{file}"
                      to:
                        title: wasm-project-file
                        is_secret: false
                        value:
                          type: plain
                          value: cc-error-pages/dist/cc-error-pages_bg.wasm
      - title: Add `tailwind.css` from `public` to `dist`
        desc: ""
        info: add-tailwind-css-to-dist-folder@0.1.0
        tags: []
        exec_in_project_dir: false
        action:
          type: post_build
          supported_langs:
            - rust
          commands:
            - bash_c: cp cc-error-pages/public/tailwind.css cc-error-pages/dist/
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
      - title: Add `favicon.ico` from `public` to `dist`
        desc: ""
        info: add-favicon-to-dist-folder@0.1.0
        tags: []
        exec_in_project_dir: false
        action:
          type: post_build
          supported_langs:
            - rust
          commands:
            - bash_c: cp cc-error-pages/public/favicon.ico cc-error-pages/dist/
              ignore_fails: false
              show_success_output: false
              show_bash_c: true
              only_when_fresh: false
